### First, we're going to save all of your datasets under a different name so you don't have to change names throughout this script.
### Currently is set up to run with the example datasets
setwd("/.SEECRS-POX-C")
setwd("/Users/emmalink/Documents/R/SEECRSLabRepos/POXC/SEECRS-POX-C")
RunMap <- read.csv("./Data/ExamplePlateMap.csv")
RunData <- read.csv("./Data/ExampleRawDataset.csv")
View(RunData)
View(RunData)
View(RunMap)
View(RunMap)
RunMedata <- *insert your sample metadata here*
### First we need to pull out the batch number from the plate name of both plate and metadata files
### depending on how you've named your files, you may need to pull a different string
RunData$Batch <- str_sub(RunData$Plate, 17, 17)
library(stringr)
library(tidyverse)
RunMedata <- *insert your sample metadata here*
### First we need to pull out the batch number from the plate name of both plate and metadata files
### depending on how you've named your files, you may need to pull a different string
RunData$Batch <- str_sub(RunData$Plate, 17, 17)
RunMap_longer <- pivot_longer(RunMap, cols = starts_with("Batch"), names_to = "BatchName")
View(RunMap)
RunMap <- read.csv("./Data/ExamplePlateMap.csv")
RunMedata <- *insert your sample metadata here*
### First we need to pull out the batch number from the plate name of both plate and metadata files
### depending on how you've named your files, you may need to pull a different string
RunData$Batch <- str_sub(RunData$Plate, 17, 17)
RunMap_longer <- pivot_longer(RunMap, cols = starts_with("Batch"), names_to = "BatchName")
View(RunData)
View(RunMap)
/Users/emmalink/Documents/R/PARCE/Analysis 2020/POX-C/Data/Metadata/CSVs
file_list <- list.files("/Users/emmalink/Documents/R/PARCE/Analysis 2020/POX-C/Data/Metadata/CSVs")
check_plater_format(file_list[1])
library(plater)
check_plater_format(file_list[1])
setwd("/Users/emmalink/Documents/R/PARCE/Analysis 2020/POX-C/Data/Metadata/CSVs")
check_plater_format(file_list[1])
ExamplePlateMap <- read_plates(file_list)
write.csv(ExamplePlateMap, "/Users/emmalink/Documents/R/SEECRSLabRepos/POXC/SEECRS-POX-C/Data/ExamplePlateMap")
write.csv(ExamplePlateMap, "/Users/emmalink/Documents/R/SEECRSLabRepos/POXC/SEECRS-POX-C/Data/ExamplePlateMap.csv")
setwd("/Users/emmalink/Documents/R/SEECRSLabRepos/POXC/SEECRS-POX-C")
RunMap <- read.csv("./Data/ExamplePlateMap.csv")
RunData$Batch <- str_sub(RunData$Plate, 17, 17)
RunMap_longer <- pivot_longer(RunMap, cols = starts_with("Batch"), names_to = "BatchName")
RunMap <- na.omit(RunMap_longer)
RunMap$Batch <- str_sub(RunMap$BatchName, 7,7)
view(RunMap)
RunData_merged <- merge(RunData, RunMap, by = c("Batch", "Wells"))
RunData_merged <- subset(RunData_merged, select = -c(Plate.x, Plate.y, BatchName))
RunData_merged <- rename(RunData_merged, PlateRead = ...2 )
RunData_merged <- rename(RunData_merged, Plot = value)
RunData_merged$Depth <- str_sub(RunData_merged$Plot, 4,6)
for (i in 1:nrow(RunData_merged)){
if(RunData_merged[i, "Depth"] == ""){RunData_merged[i, "Depth"] = "0-15"}
else if(RunData_merged[i, "Depth"] == "-0" || RunData_merged[i, "Depth"] == ".0"){RunData_merged[i, "Depth"] = "0-15"}
else if(RunData_merged[i, "Depth"] == "-15"){RunData_merged[i, "Depth"] = "15-30"}
else if(RunData_merged[i, "Depth"] == "-30"){RunData_merged[i, "Depth"] = "15-30"}
}
### Now, we merge in the weight metadata. Recommend also putting block and treatment in with weight
RunData_merged <- merge(RunData_merged, RunMetadata, by = c("Batch", "Plot"))
### Calculate averages, sd, and cv for all plots/standard wells. Search for cv > 10
RunData_merged <- RunData_merged %>%
group_by(Batch, Plot) %>%
mutate(Plot_mean = mean(PlateRead), sd = sd(PlateRead), cv = sd(PlateRead)/mean(PlateRead)*100)
for (i in 1:nrow(RunData_merged)) {
if(RunData_merged[i, "Plot"] == "SLTN_BLNK") {RunData_merged[i, "Concentration"] = "0"}
else if (RunData_merged[i, "Plot"] == "0.05mM") {RunData_merged[i, "Concentration"] = "0.005"}
else if (RunData_merged[i, "Plot"] == "0.15mM") {RunData_merged[i, "Concentration"] = "0.015"}
else if (RunData_merged[i, "Plot"] == "0.2mM") {RunData_merged[i, "Concentration"] = "0.02"}
else if (RunData_merged[i, "Plot"] == "0.1mM") {RunData_merged[i, "Concentration"] = "0.01"}
else {RunData_merged[i, "Concentration"] = "0.02"}
}
RunData_merged$Concentration <- as.numeric(RunData_merged$Concentration)
### Calculate curve slope and intercept in another dataframe
####Y axis is molarity, x axis is absorbance values. See written protocol
StandardCurves <- RunData_merged %>%
group_by(Batch) %>%
filter(Plot %in% c("0.05mM", "SLTN_BLNK", "0.15mM", "0.1mM", "0.2mM")) %>%
mutate(Intercept = tidy(lm(Concentration ~ Plot_mean))[1,2], Slope = tidy(lm(Concentration ~ Plot_mean))[2,2])
library(tidyverse)
### Calculate curve slope and intercept in another dataframe
####Y axis is molarity, x axis is absorbance values. See written protocol
StandardCurves <- RunData_merged %>%
group_by(Batch) %>%
filter(Plot %in% c("0.05mM", "SLTN_BLNK", "0.15mM", "0.1mM", "0.2mM")) %>%
mutate(Intercept = tidy(lm(Concentration ~ Plot_mean))[1,2], Slope = tidy(lm(Concentration ~ Plot_mean))[2,2])
library(stringr)
### Calculate curve slope and intercept in another dataframe
####Y axis is molarity, x axis is absorbance values. See written protocol
StandardCurves <- RunData_merged %>%
group_by(Batch) %>%
filter(Plot %in% c("0.05mM", "SLTN_BLNK", "0.15mM", "0.1mM", "0.2mM")) %>%
mutate(Intercept = tidy(lm(Concentration ~ Plot_mean))[1,2], Slope = tidy(lm(Concentration ~ Plot_mean))[2,2])
library(broom)
### Calculate curve slope and intercept in another dataframe
####Y axis is molarity, x axis is absorbance values. See written protocol
StandardCurves <- RunData_merged %>%
group_by(Batch) %>%
filter(Plot %in% c("0.05mM", "SLTN_BLNK", "0.15mM", "0.1mM", "0.2mM")) %>%
mutate(Intercept = tidy(lm(Concentration ~ Plot_mean))[1,2], Slope = tidy(lm(Concentration ~ Plot_mean))[2,2])
### Remove duplicate entries from standard curves and keep only batch, intercept, and slope columns as integer (not list)
StandardCurves <- StandardCurves[,c(1,10,11)]
StandardCurves$Slope <- StandardCurves$Slope[1]
StandardCurves$Intercept <- StandardCurves$Intercept[1]
RunData <- read.csv("./Data/ExampleRawDataset.csv")
RunMap <- read.csv("./Data/ExamplePlateMap.csv")
RunData$Batch <- str_sub(RunData$Plate, 17, 17)
RunMap_longer <- pivot_longer(RunMap, cols = starts_with("Batch"), names_to = "BatchName")
RunMap <- na.omit(RunMap_longer)
RunMap$Batch <- str_sub(RunMap$BatchName, 7,7)
RunData_merged <- merge(RunData, RunMap, by = c("Batch", "Wells"))
RunData_merged <- subset(RunData_merged, select = -c(Plate.x, Plate.y, BatchName))
RunData_merged <- rename(RunData_merged, PlateRead = ...2 )
RunData_merged <- rename(RunData_merged, Plot = value)
RunData_merged$Depth <- str_sub(RunData_merged$Plot, 4,6)
for (i in 1:nrow(RunData_merged)){
if(RunData_merged[i, "Depth"] == ""){RunData_merged[i, "Depth"] = "0-15"}
else if(RunData_merged[i, "Depth"] == "-0" || RunData_merged[i, "Depth"] == ".0"){RunData_merged[i, "Depth"] = "0-15"}
else if(RunData_merged[i, "Depth"] == "-15"){RunData_merged[i, "Depth"] = "15-30"}
else if(RunData_merged[i, "Depth"] == "-30"){RunData_merged[i, "Depth"] = "15-30"}
}
### Now, we merge in the weight metadata. Recommend also putting block and treatment in with weight
RunData_merged <- merge(RunData_merged, RunMetadata, by = c("Batch", "Plot"))
### Calculate averages, sd, and cv for all plots/standard wells. Search for cv > 10
RunData_merged <- RunData_merged %>%
group_by(Batch, Plot) %>%
mutate(Plot_mean = mean(PlateRead), sd = sd(PlateRead), cv = sd(PlateRead)/mean(PlateRead)*100)
for (i in 1:nrow(RunData_merged)) {
if(RunData_merged[i, "Plot"] == "SLTN_BLNK") {RunData_merged[i, "Concentration"] = "0"}
else if (RunData_merged[i, "Plot"] == "0.05mM") {RunData_merged[i, "Concentration"] = "0.005"}
else if (RunData_merged[i, "Plot"] == "0.15mM") {RunData_merged[i, "Concentration"] = "0.015"}
else if (RunData_merged[i, "Plot"] == "0.2mM") {RunData_merged[i, "Concentration"] = "0.02"}
else if (RunData_merged[i, "Plot"] == "0.1mM") {RunData_merged[i, "Concentration"] = "0.01"}
else {RunData_merged[i, "Concentration"] = "0.02"}
}
RunData_merged$Concentration <- as.numeric(RunData_merged$Concentration)
### Calculate curve slope and intercept in another dataframe
####Y axis is molarity, x axis is absorbance values. See written protocol
StandardCurves <- RunData_merged %>%
group_by(Batch) %>%
filter(Plot %in% c("0.05mM", "SLTN_BLNK", "0.15mM", "0.1mM", "0.2mM")) %>%
mutate(Intercept = tidy(lm(Concentration ~ Plot_mean))[1,2], Slope = tidy(lm(Concentration ~ Plot_mean))[2,2])
### Remove duplicate entries from standard curves and keep only batch, intercept, and slope columns as integer (not list)
StandardCurves <- StandardCurves[,c(1,10,11)]
StandardCurves$Slope <- StandardCurves$Slope[1]
StandardCurves$Intercept <- StandardCurves$Intercept[1]
View(StandardCurves)
library(tidyverse)
### Calculate curve slope and intercept in another dataframe
####Y axis is molarity, x axis is absorbance values. See written protocol
StandardCurves <- RunData_merged %>%
group_by(Batch) %>%
filter(Plot %in% c("0.05mM", "SLTN_BLNK", "0.15mM", "0.1mM", "0.2mM")) %>%
mutate(Intercept = tidy(lm(Concentration ~ Plot_mean))[1,2], Slope = tidy(lm(Concentration ~ Plot_mean))[2,2])
View(StandardCurves)
### Remove duplicate entries from standard curves and keep only batch, intercept, and slope columns as integer (not list)
StandardCurves <- StandardCurves[,c(1,10,11)]
View(StandardCurves)
### Calculate curve slope and intercept in another dataframe
####Y axis is molarity, x axis is absorbance values. See written protocol
StandardCurves <- RunData_merged %>%
group_by(Batch) %>%
filter(Plot %in% c("0.05mM", "SLTN_BLNK", "0.15mM", "0.1mM", "0.2mM")) %>%
mutate(Intercept = tidy(lm(Concentration ~ Plot_mean))[1,2], Slope = tidy(lm(Concentration ~ Plot_mean))[2,2])
View(StandardCurves)
view(RunData_merged)
view(RunData)
view(RunMap)
view(RunData_merged)
RunData <- read.csv("./Data/ExampleRawDataset.csv")
view(RunData)
setwd("/Users/emmalink/Documents/R/PARCE/Analysis 2020/POX-C/Data/Metadata/POXCPlates_PARCE_2021_CN.xlsx")
setwd("/Users/emmalink/Documents/R/PARCE/Analysis 2020/POX-C/Data/Metadata")
file_list <- list.files("/Users/emmalink/Documents/R/PARCE/Analysis 2020/POX-C/Data/Metadata")
pathbase <- path %>%
basename() %>%
tools::file_path_sans_ext()
##A function which takes a workbook and reads all sheets to csv. Remember to set range to what you need it to be.
read_then_csv <- function(sheet, path) {
pathbase <- path %>%
basename() %>%
tools::file_path_sans_ext()
path %>%
read_excel(sheet = sheet, range = "A1:M9") %>%
write_csv(paste0(pathbase, "-", sheet, ".csv"), quote = FALSE)
}
for (i in 1:length(file_list)) {
XLS = file_list[i]
XLS %>%
excel_sheets() %>%
set_names() %>%
map(read_then_csv, path = XLS)
}
for (i in 1:length(file_list)) {
XLS = file_list[i]
XLS %>%
excel_sheets() %>%
set_names() %>%
map(read_then_csv, path = XLS)
}
library(writexl)
library(readxl)
for (i in 1:length(file_list)) {
XLS = file_list[i]
XLS %>%
excel_sheets() %>%
set_names() %>%
map(read_then_csv, path = XLS)
}
setwd("/Users/emmalink/Documents/R/PARCE/Analysis 2020/POX-C/Data/Metadata/RawSheet")
file_list <- list.files(path = "/Users/emmalink/Documents/R/PARCE/Analysis 2020/POX-C/Data/Metadata/RawSheet")
for (i in 1:length(file_list)) {
XLS = file_list[i]
XLS %>%
excel_sheets() %>%
set_names() %>%
map(read_then_csv, path = XLS)
}
setwd("/Users/emmalink/Documents/R/PARCE/Analysis 2020/POX-C/Data/Metadata/CSVs")
file_list <- list.files(path = "/Users/emmalink/Documents/R/PARCE/Analysis 2020/POX-C/Data/Metadata/CSVs")
check_plater_format(file_list[1])
ExampleRunData <-
<- read_plates(files = file_list)
ExampleRunData <- read_plates(files = file_list)
write.csv(ExampleRunData, "/Users/emmalink/Documents/R/SEECRSLabRepos/POXC/SEECRS-POX-C/Data")
write.csv(ExampleRunData, "/Users/emmalink/Documents/R/SEECRSLabRepos/POXC/SEECRS-POX-C/Data/ExampleRawDataset")
setwd("/Users/emmalink/Documents/R/PARCE/Analysis 2020/POX-C/Data/Raw_CSV")
file_list <- list.files("/Users/emmalink/Documents/R/PARCE/Analysis 2020/POX-C/Data/Raw_CSV")
check_plater_format(file_list[1])
ExamplePlateMap <- read_plates(files = file_list)
write.csv(ExamplePlateMap, "/Users/emmalink/Documents/R/SEECRSLabRepos/POXC/SEECRS-POX-C/Data/ExamplePlateMap")
RunData <- read.csv("./Data/ExampleRawDataset")
setwd("/Users/emmalink/Documents/R/SEECRSLabRepos/POXC/SEECRS-POX-C")
RunData <- read.csv("./Data/ExampleRawDataset")
RunMap <- read.csv("./Data/ExamplePlateMap")
RunData$Batch <- str_sub(RunData$Plate, 17, 17)
RunMap_longer <- pivot_longer(RunMap, cols = starts_with("Batch"), names_to = "BatchName")
RunMap <- na.omit(RunMap_longer)
RunMap$Batch <- str_sub(RunMap$BatchName, 7,7)
View(RunData)
View(RunMap)
RunData <- RunData[,-c(1)]
View(RunData)
RunMap <- RunMap[,-c(1)]
RunData$Batch <- str_sub(RunData$Plate, 17, 17)
RunMap_longer <- pivot_longer(RunMap, cols = starts_with("Batch"), names_to = "BatchName")
RunMap <- na.omit(RunMap_longer)
RunMap$Batch <- str_sub(RunMap$BatchName, 7,7)
View(RunMap)
RunMap <- RunMap[,-c(1)]
View(RunMap)
RunData$Batch <- str_sub(RunData$Plate, 17, 17)
RunMap_longer <- pivot_longer(RunMap, cols = starts_with("Batch"), names_to = "BatchName")
View(RunMap)
RunMap <- read.csv("./Data/ExamplePlateMap")
RunMap <- RunMap[,-c(1)]
View(RunMap)
RunMap <- read.csv("./Data/ExamplePlateMap")
RunMap <- RunMap[,-c(1)]
View(RunMap)
View(RunData)
RunData <- read.csv("./Data/ExampleRawDataset")
RunData <- read.csv("./Data/ExampleRawData")
#For some reason the example file is reading in a random first column, just delete it, but you shouldn't do this with your data probably
RunData <- RunData[,-c(1)]
RunMap <- read.csv("./Data/ExamplePlateMap")
RunMap <- RunMap[,-c(1)]
View(RunData)
View(RunMap)
RunData$Batch <- str_sub(RunData$Plate, 17, 17)
RunMap_longer <- pivot_longer(RunMap, cols = starts_with("Batch"), names_to = "BatchName")
RunMap <- na.omit(RunMap_longer)
RunMap$Batch <- str_sub(RunMap$BatchName, 7,7)
RunData_merged <- merge(RunData, RunMap, by = c("Batch", "Wells"))
RunData_merged <- subset(RunData_merged, select = -c(Plate.x, Plate.y, BatchName))
RunData_merged <- rename(RunData_merged, PlateRead = ...2 )
RunData_merged <- rename(RunData_merged, Plot = value)
RunData_merged$Depth <- str_sub(RunData_merged$Plot, 4,6)
for (i in 1:nrow(RunData_merged)){
if(RunData_merged[i, "Depth"] == ""){RunData_merged[i, "Depth"] = "0-15"}
else if(RunData_merged[i, "Depth"] == "-0" || RunData_merged[i, "Depth"] == ".0"){RunData_merged[i, "Depth"] = "0-15"}
else if(RunData_merged[i, "Depth"] == "-15"){RunData_merged[i, "Depth"] = "15-30"}
else if(RunData_merged[i, "Depth"] == "-30"){RunData_merged[i, "Depth"] = "15-30"}
}
### Now, we merge in the weight metadata. Recommend also putting block and treatment in with weight
RunData_merged <- merge(RunData_merged, RunMetadata, by = c("Batch", "Plot"))
### Calculate averages, sd, and cv for all plots/standard wells. Search for cv > 10
RunData_merged <- RunData_merged %>%
group_by(Batch, Plot) %>%
mutate(Plot_mean = mean(PlateRead), sd = sd(PlateRead), cv = sd(PlateRead)/mean(PlateRead)*100)
for (i in 1:nrow(RunData_merged)) {
if(RunData_merged[i, "Plot"] == "SLTN_BLNK") {RunData_merged[i, "Concentration"] = "0"}
else if (RunData_merged[i, "Plot"] == "0.05mM") {RunData_merged[i, "Concentration"] = "0.005"}
else if (RunData_merged[i, "Plot"] == "0.15mM") {RunData_merged[i, "Concentration"] = "0.015"}
else if (RunData_merged[i, "Plot"] == "0.2mM") {RunData_merged[i, "Concentration"] = "0.02"}
else if (RunData_merged[i, "Plot"] == "0.1mM") {RunData_merged[i, "Concentration"] = "0.01"}
else {RunData_merged[i, "Concentration"] = "0.02"}
}
RunData_merged$Concentration <- as.numeric(RunData_merged$Concentration)
### Calculate curve slope and intercept in another dataframe
####Y axis is molarity, x axis is absorbance values. See written protocol
StandardCurves <- RunData_merged %>%
group_by(Batch) %>%
filter(Plot %in% c("0.05mM", "SLTN_BLNK", "0.15mM", "0.1mM", "0.2mM")) %>%
mutate(Intercept = tidy(lm(Concentration ~ Plot_mean))[1,2], Slope = tidy(lm(Concentration ~ Plot_mean))[2,2])
### Remove duplicate entries from standard curves and keep only batch, intercept, and slope columns as integer (not list)
StandardCurves <- StandardCurves[,c(1,10,11)]
StandardCurves$Slope <- StandardCurves$Slope[1]
StandardCurves$Intercept <- StandardCurves$Intercept[1]
StandardCurves <- distinct(StandardCurves)
### Remove from general dataset entries that are not sample reads
### First, define function that is the opposite of %in%
'%notin%' = Negate('%in%')
RunData_merged <- RunData_merged[RunData_merged$Plot %notin% c("0.05mM", "SLTN_BLNK", "0.15mM", "0.1mM", "0.2mM"),]
###Merge standard curves in with the general reads
RunData_merged <- merge(RunData_merged, StandardCurves, by = "Batch")
RunData_merged <- RunData_merged %>%
mutate(POXC = ((0.02-(Intercept + (Slope * Plot_mean)))*9000*(0.02/0.0025)))
### Keep only the distinct entries (get rid of the triplicates since we calculate POX on the averages anyway)
RunData_final <- distinct(RunData_merged[,-c(2,3)])
view(RunData_final)
### Do any cleanup of the dataset that you need
## for examples, my Plot names need cleanup; I need to pull the depth indicators out of the names
###I'm going to do this by truncating the length of the plot name to 3
RunData_final$Plot <- substr(RunData_final$Plot, 1,3)
### Save a csv copy of your dataset at this point - you're done with calculations!
### make sure you update the location and name you want to write to
write.csv(RunData_final, ".Data/ExampleFinalDataset_2021.csv")
### Save a csv copy of your dataset at this point - you're done with calculations!
### make sure you update the location and name you want to write to
write.csv(RunData_final, ".Data/ExampleFinalDataset_2021")
### Save a csv copy of your dataset at this point - you're done with calculations!
### make sure you update the location and name you want to write to
write.csv(RunData_final, "./Data/ExampleFinalDataset_2021")
